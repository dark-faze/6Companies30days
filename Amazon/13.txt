int orangesRotting(vector<vector<int>>& grid) {
        if(grid.empty()) return 0;
        int m = grid.size();
        int n = grid[0].size();
        queue<pair<int,int>> q;
        int time = 0;
        int rotten = 0;
        int oranges = 0;
        for(int y = 0 ; y < m ;y++){
            for(int z = 0 ; z < n ; z++){
                if(grid[y][z] != 0) oranges++;
                 if(grid[y][z] == 2) {
                     q.push({y,z});
                 }
            }
        }
        while(!q.empty()){
             int size = q.size();
             rotten+=size;
            for(int i = 0 ; i < size ; i++){
                int j = q.front().first;
                int k = q.front().second;
                q.pop();
                if(j-1 >= 0 && j-1 < m && grid[j-1][k] == 1){
                     grid[j-1][k] = 2;                 
                    q.push({j-1,k});
                }
                 if(j+1 >= 0 && j+1 < m && grid[j+1][k] == 1){
                     grid[j+1][k] = 2;
                    q.push({j+1,k});
                }
                 if(k-1 >= 0 && k-1 < n && grid[j][k-1] == 1){
                     grid[j][k-1] = 2;
                    q.push({j,k-1});
                }
                 if(k+1 >= 0 && k+1 < n && grid[j][k+1] == 1){
                     grid[j][k+1] = 2;
                    q.push({j,k+1});
                }
            }
            if(q.size() != 0)
                time++;
            
        }
        if(oranges != rotten) return -1;
        return time;